My Notes
--------------

Creating a surf board shop application using Node JS, Express, Mongo DB

---------------------------------------------
Using Trello board to track the work flow
---------------------------------------------
    - Use link to view the board - "https://trello.com/b/ajLTsCTl/surf-shop-node-js"

-------------------
Basic Set up
-------------------
    - Create a base set up using express application generator
        https://expressjs.com/en/starter/generator.html

    - Open cmd prompt in the desired folder
    
    - Use the command "npx express-generator --view=ejs" to create a new application
        -> --view=ejs is used to set the view engine as ejs instead of jade or pug

    - Use the command "npm i" to install all the dependencies in package.json and 
      create the node_modules folder

    - Install the required dependencies other than the default ones in package.json
        "npm i body-parser server-favicon mongoose passport"

    - Install the required dev dependencies
        "npm i -D locus dotenv"

    - Install nodemon to run the Node JS application
        "npm i -g nodemon"

    - Create additional folders -> controllers, views, middleware

    - Run the application
       use cmd - "nodemon"

    - Open chrome -> naviagate to "localhost:3000" to view the application

--------------------------------
Initialize the Git Repo
--------------------------------
    - Open cmd prompt

    - Use cmd "git init" to initialize git repo

    - create a .gitignore, .env files  
    
    - Add /node_modules and .env in .gitignore file inorder to avoid committing them

    - Use cmd "git add ." to stage the files and folders to commit

    - Use cmd -> git commit -m "commit message" to commit the code

    - Use cmd "git push" to publish the repo

-------------------------------------
SET UP ROUTES - creating RESTFUL routes
-------------------------------------
    - Home or Index route -> default page or the landing page for the application
        refer /routes/index.js

   --------------
    Post Routes
   --------------
        - refer /routes/posts.js

    - GET  index           /posts
    - GET  new             /posts/new
    - POST  create         /posts
    - GET  show            /posts/:id
    - GET  edit            /posts/:id/edit
    - PUT  update          /posts/:id
    - DELETE  destroy      /posts/:id

   ------------------
    Review Routes
   ------------------
        - refer /routes/reviews.js

    - The default route for reviews is /posts/:id/reviews - since each post will have some reviews
    - The "id" refers to the post id -> needed to add/modify/delete reviews for a specific post

    - const router = express.Router({ mergeParams : true }); -> mergeParams : true -> used to get the post id
    from the route

    - GET  index           /posts/:id/reviews   
    - POST  create         /posts/:id/reviews
    - GET  edit            /posts/:id/reviews/:review_id/edit
    - PUT  update          /posts/:id/reviews/:review_id
    - DELETE  destroy      /posts/:id/reviews/:review_id

   ------------------
    User Routes
   ------------------
        - refer /routes/index.js

    - Using "index.js" file to define the index and user routes

    Default index route:
    ----------------------
    - GET  index           /

    To Create a user:
    -----------------
    - GET  register        /register
    - POST register        /register

    Login routes:
    ----------------
    - GET  login        /login
    - POST login        /login

    Profile routes: user profile once the user has logged in
    ----------------------------------------------------------
    - GET profile        /profile
    - PUT profile        /profile/:user_id --> To update the details of an existing user

    Forgot password routes:
    -----------------------
    - GET  forgot        /forgot
    - PUT forgot         /forgot

    Reset password routes: Reset normally takes a token
    ------------------------------------------------------
    refer tutorial - http://sahatyalkabov.com/how-to-implement-password-reset-in-nodejs/

    - GET  reset        /reset/:token
    - PUT  reset        /reset/:token

--------------------------------
BUILD DATA MODELS:
--------------------------------

Create schemas for user, post, reviews

User Schema: refer /models/user.js
------------------------------------
  - email - string
  - password - string
  - username - string
  - image - string
  - posts - array of objects ref Post

- The username and password are not explicitly added in the schema structure as we are using 
passport-local-mongoose. 
- passport-local-mongoose will add a username, hash and salt field to store the username, 
the hashed password and the salt value

Post Schema: refer /models/post.js
------------------------------------
  - title - string
  - price - string
  - description - string
  - images - array of strings
  - location - string
  - latitude - number
  - longitude - number
  - author - object id (ref User)
  - reviews - array of objects

Review Schema: refer /models/review.js
----------------------------------------
  - body - string
  - author - object id (ref User)

-------------------------------------
AUTHENTICATION & SESSION MANAGEMENT
-------------------------------------
    - Configure session & passport before mounting routes

    - Install passport-local, passport-local-mongoose, express-session with npm
        npm i -S passport-local passport-local-mongoose express-session
    - configure session before configuring passport - refer - link below
        - https://github.com/expressjs/session
    - configure passport, passport-local-mongoose in app.js - refer - link below
        - https://github.com/saintedlama/passport-local-mongoose#simplified-passportpassport-local-configuration

    - Configure Mongoose
    ---------------------
        - refer app.js -> connect to the database section
        - referal link -> https://mongoosejs.com & https://mongoosejs.com/docs/index.html

    --------------
    CONTROLLERS
    --------------
    - refer ./controllers/index.js

    - code for register method - refer -> https://github.com/saintedlama/passport-local-mongoose/blob/master/examples/login/routes.js

    - Adding Error Handler:
    ------------------------
        - refer ./middleware/index.js to create the error handler, 
          ./routes/index.js to use the error handler in the postRegister
        
        - The error handler takes a method as an argument, hence passing the postRegister method as an arg
---------------
CONVENTIONS
---------------
    - Route files are always plural
    - Model files are always singular

    Git -> commit message format -> Present tense verb and a short description
        Example - Add   index and user routes
                 -----  ---------------------
                   |            |
                   Verb     Description

--------------
CODING NOTES:
--------------
    - index.js -> routes
        const { postRegister } = require('../controllers/index');
    Using the "destructure" feature of ES6 to directly use the object in require instead of
        const indexObj = require('../controllers/index');
        const postRegister = indexObj.postRegister;

    - const { postRegister } = require('../controllers');
      const { errorHandler } = require('../middleware');
    Instead of explicitly specifying index.js, the above statements will refer to the
    "first file" under the folders
    The other files inside the folders need to be mentioned explicitly in the require statements

--------------------------------
MONGO DB INSTALLATION & SET UP
--------------------------------
    - Download the latest stable version of MongoDB from https://www.mongodb.com/try/download/community
    - Install the .msi - use the default settings
    - Add environment variable
        - win seaarch -> edit env variables -> path -> Add -> C:\Program Files\MongoDB\Server\4.4\bin
    - Set the db path
        - create a new folder - "db" inside "C:\Program Files\MongoDB\Server\4.4\data"
    - To run the mongodb in local -> Open a cmd prompt -> type "mongo"

-------------
OTHER LINKS
-------------
    - https://tutorialzine.com/2017/07/javascript-async-await-explained
    - https://blog.sessionstack.com/how-javascript-works-event-loop-and-the-rise-of-async-programming-5-ways-to-better-coding-with-2f077c4438b5
    - https://bluepnume.medium.com/learn-about-promises-before-you-start-using-async-await-eb148164a9c8
       